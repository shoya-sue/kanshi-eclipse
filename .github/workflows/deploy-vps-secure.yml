name: Secure VPS Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'デプロイ環境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'テストをスキップ'
        required: false
        default: false
        type: boolean
      message:
        description: 'デプロイメッセージ'
        required: false
        default: '手動デプロイ'

env:
  NODE_VERSION: '20'
  BUILD_DIR: 'dist'
  DEPLOY_PATH: '/var/www/vhosts/kanshi-eclipse.sho43.xyz'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
      continue-on-error: true
    
    - name: Run type check
      run: npm run typecheck
      continue-on-error: true
    
    - name: Run tests
      run: npm test
      continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
      env:
        VITE_ECLIPSE_RPC_URL: https://eclipse.helius-rpc.com/
        NODE_ENV: production
    
    - name: Create deployment archive
      run: |
        tar -czf deploy.tar.gz -C ${{ env.BUILD_DIR }} .
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: deploy.tar.gz
        retention-days: 1

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    if: always()
    environment:
      name: production
      url: https://kanshi-eclipse.sho43.xyz
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-artifact
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Create backup of current deployment
          if [ -d "${{ env.DEPLOY_PATH }}" ]; then
            sudo tar -czf "/var/backups/kanshi-eclipse-$(date +%Y%m%d-%H%M%S).tar.gz" -C "${{ env.DEPLOY_PATH }}" .
          fi
          
          # Create temporary directory
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          
          # Clean deployment directory
          sudo rm -rf ${{ env.DEPLOY_PATH }}/*
    
    - name: Upload and extract files
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        source: "deploy.tar.gz"
        target: "/tmp/"
    
    - name: Extract and set permissions
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Extract files
          sudo tar -xzf /tmp/deploy.tar.gz -C ${{ env.DEPLOY_PATH }}
          
          # Set ownership and permissions
          sudo chown -R www-data:www-data ${{ env.DEPLOY_PATH }}
          sudo find ${{ env.DEPLOY_PATH }} -type d -exec chmod 755 {} \;
          sudo find ${{ env.DEPLOY_PATH }} -type f -exec chmod 644 {} \;
          
          # Clean up
          rm -f /tmp/deploy.tar.gz
          
          # Reload web server
          sudo systemctl reload nginx || sudo systemctl reload apache2
    
    - name: Health check
      run: |
        sleep 5
        response=$(curl -s -o /dev/null -w "%{http_code}" https://kanshi-eclipse.sho43.xyz)
        if [ $response -eq 200 ]; then
          echo "✅ Deployment successful - Site is accessible"
        else
          echo "❌ Deployment may have failed - HTTP status: $response"
          exit 1
        fi

  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "## 🚀 VPS Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "✅ **Status**: Deployment successful" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **URL**: https://kanshi-eclipse.sho43.xyz" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Deployment failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Message**: ${{ github.event.inputs.message }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY