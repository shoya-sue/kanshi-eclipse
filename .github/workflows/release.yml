name: Release Automation

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  pull-requests: read

env:
  NODE_VERSION: '18'

jobs:
  # Build and Test
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:coverage

      - name: Build application
        run: npm run build

      - name: Create build archive
        run: |
          cd dist
          tar -czf ../eclipse-chain-tools-${{ github.event.inputs.version || github.ref_name }}.tar.gz .
          zip -r ../eclipse-chain-tools-${{ github.event.inputs.version || github.ref_name }}.zip .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-builds
          path: |
            eclipse-chain-tools-*.tar.gz
            eclipse-chain-tools-*.zip
          retention-days: 30

  # Generate Release Notes
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    outputs:
      release-notes: ${{ steps.notes.outputs.release-notes }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ github.event.inputs.version || github.ref_name }}"
          
          echo "Generating release notes for $CURRENT_TAG..."
          
          # Generate changelog
          if [[ -n "$LATEST_TAG" ]]; then
            echo "## What's Changed" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            
            # Get commits between tags
            git log $LATEST_TAG..HEAD --pretty=format:"* %s (%h)" --no-merges >> RELEASE_NOTES.md
            
            echo "" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "## Full Changelog" >> RELEASE_NOTES.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...$CURRENT_TAG" >> RELEASE_NOTES.md
          else
            echo "## üéâ Initial Release" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "This is the first release of Eclipse Chain Tools!" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "### Features" >> RELEASE_NOTES.md
            echo "* Complete Eclipse blockchain frontend toolkit" >> RELEASE_NOTES.md
            echo "* Gas fee tracking and monitoring" >> RELEASE_NOTES.md
            echo "* Transaction analyzer with detailed insights" >> RELEASE_NOTES.md
            echo "* RPC endpoint monitoring" >> RELEASE_NOTES.md
            echo "* DEX integration with Jupiter and Raydium" >> RELEASE_NOTES.md
            echo "* Wallet connectivity and management" >> RELEASE_NOTES.md
            echo "* Performance monitoring and analytics" >> RELEASE_NOTES.md
            echo "* Multi-language support (Japanese/English)" >> RELEASE_NOTES.md
            echo "* Accessibility features (WCAG 2.1 AA compliant)" >> RELEASE_NOTES.md
            echo "* Comprehensive error handling and recovery" >> RELEASE_NOTES.md
          fi
          
          # Set output
          {
            echo 'release-notes<<EOF'
            cat RELEASE_NOTES.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, generate-release-notes]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-builds

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          release_name: Eclipse Chain Tools ${{ github.event.inputs.version || github.ref_name }}
          body_path: RELEASE_NOTES.md
          draft: ${{ github.event.inputs.draft || false }}
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - name: Upload Release Assets
        run: |
          # Upload tar.gz
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/gzip" \
            --data-binary @eclipse-chain-tools-${{ github.event.inputs.version || github.ref_name }}.tar.gz \
            "${{ steps.create_release.outputs.upload_url }}?name=eclipse-chain-tools-${{ github.event.inputs.version || github.ref_name }}.tar.gz&label=Source%20Code%20(tar.gz)"
          
          # Upload zip
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @eclipse-chain-tools-${{ github.event.inputs.version || github.ref_name }}.zip \
            "${{ steps.create_release.outputs.upload_url }}?name=eclipse-chain-tools-${{ github.event.inputs.version || github.ref_name }}.zip&label=Source%20Code%20(zip)"

  # Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update version in documentation
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          
          # Update README.md if it exists
          if [[ -f README.md ]]; then
            sed -i "s/Version: .*/Version: $VERSION/" README.md || true
          fi
          
          # Update package.json version
          if [[ -f package.json ]]; then
            npm version $VERSION --no-git-tag-version || true
          fi

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "chore: update version to ${{ github.event.inputs.version || github.ref_name }}"
          git push || true

  # Post-release notifications
  notify:
    name: Post-release Notifications
    runs-on: ubuntu-latest
    needs: [create-release, update-docs]
    if: always()
    
    steps:
      - name: Generate release summary
        run: |
          echo "## üéâ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ github.event.inputs.prerelease && 'Pre-release' || 'Release' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ github.event.inputs.draft && 'Draft' || 'Published' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Created by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Creation**: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation Update**: ${{ needs.update-docs.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Check release status
        run: |
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "‚úÖ Release created successfully"
          else
            echo "‚ùå Release creation failed"
            exit 1
          fi