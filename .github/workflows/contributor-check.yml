name: Contributor Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  NODE_VERSION: '18'

jobs:
  # Basic validation for external contributors
  validate-contribution:
    name: Validate Contribution
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name != github.repository
    
    steps:
      - name: Check PR title format
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            const validPrefixes = ['feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'test:', 'chore:'];
            const isValid = validPrefixes.some(prefix => title.toLowerCase().startsWith(prefix));
            
            if (!isValid) {
              core.setFailed(`PR title must start with one of: ${validPrefixes.join(', ')}`);
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: `‚ùå **Invalid PR Title Format**\n\nPlease format your PR title with one of these prefixes:\n${validPrefixes.map(p => `- \`${p}\``).join('\n')}\n\nExample: \`feat: add new dashboard widget\``,
                event: 'REQUEST_CHANGES'
              });
            } else {
              core.info('PR title format is valid');
            }

      - name: Check PR description
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.pull_request.body || '';
            const minLength = 50;
            
            if (body.length < minLength) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: `‚ö†Ô∏è **PR Description Too Short**\n\nPlease provide a more detailed description of your changes (minimum ${minLength} characters).\n\nInclude:\n- What changes were made\n- Why these changes were necessary\n- Any testing performed`,
                event: 'REQUEST_CHANGES'
              });
            }

  # Welcome new contributors
  welcome-contributor:
    name: Welcome New Contributors
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' && github.event.pull_request.head.repo.full_name != github.repository
    
    steps:
      - name: Check if first-time contributor
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              creator: context.payload.pull_request.user.login,
              state: 'all'
            });
            
            const isFirstTime = pulls.length === 1;
            
            if (isFirstTime) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `üéâ **Welcome to Eclipse Chain Tools!**
            
            Thank you for your first contribution! Here's what happens next:
            
            1. ‚úÖ Automated checks will run on your PR
            2. üîç A maintainer will review your changes
            3. üí¨ We may ask for some changes or improvements
            4. üéä Once approved, your changes will be merged!
            
            ### Contribution Guidelines
            - Make sure all tests pass
            - Follow our coding standards
            - Update documentation if needed
            - Be patient - reviews may take a few days
            
            Thanks for making Eclipse Chain Tools better! üöÄ`
              });
            }

  # Code quality checks for contributors
  contributor-quality-check:
    name: Contributor Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name != github.repository
    
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          npm run lint > lint-output.txt 2>&1 || true
          
          if [ -s lint-output.txt ]; then
            echo "## üîç Linting Results" >> pr-feedback.md
            echo "" >> pr-feedback.md
            echo "Please fix the following linting issues:" >> pr-feedback.md
            echo '```' >> pr-feedback.md
            cat lint-output.txt >> pr-feedback.md
            echo '```' >> pr-feedback.md
            echo "" >> pr-feedback.md
          fi

      - name: Run type checking
        run: |
          npm run typecheck > typecheck-output.txt 2>&1 || true
          
          if [ -s typecheck-output.txt ]; then
            echo "## üìù TypeScript Issues" >> pr-feedback.md
            echo "" >> pr-feedback.md
            echo "Please fix the following TypeScript issues:" >> pr-feedback.md
            echo '```' >> pr-feedback.md
            cat typecheck-output.txt >> pr-feedback.md
            echo '```' >> pr-feedback.md
            echo "" >> pr-feedback.md
          fi

      - name: Test build
        run: |
          if ! npm run build > build-output.txt 2>&1; then
            echo "## ‚ùå Build Failed" >> pr-feedback.md
            echo "" >> pr-feedback.md
            echo "The build is failing. Please fix these issues:" >> pr-feedback.md
            echo '```' >> pr-feedback.md
            cat build-output.txt >> pr-feedback.md
            echo '```' >> pr-feedback.md
            echo "" >> pr-feedback.md
          fi

      - name: Run tests
        run: |
          if ! npm run test > test-output.txt 2>&1; then
            echo "## üß™ Test Failures" >> pr-feedback.md
            echo "" >> pr-feedback.md
            echo "Some tests are failing. Please fix these issues:" >> pr-feedback.md
            echo '```' >> pr-feedback.md
            cat test-output.txt >> pr-feedback.md
            echo '```' >> pr-feedback.md
            echo "" >> pr-feedback.md
          fi

      - name: Post feedback comment
        if: hashFiles('pr-feedback.md') != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('pr-feedback.md')) {
              const feedback = fs.readFileSync('pr-feedback.md', 'utf8');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `## ü§ñ Automated Code Review\n\n${feedback}\n\n---\n*This is an automated review. A human maintainer will also review your PR.*`
              });
            }

  # Security check for external PRs
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name != github.repository
    
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          if ! npm audit --audit-level=moderate; then
            echo "‚ö†Ô∏è Security vulnerabilities detected in dependencies"
            echo "::warning::Security vulnerabilities found - please review"
          fi

      - name: Scan for sensitive patterns
        run: |
          # Check for common sensitive patterns
          if grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/ | grep -v "test\|spec"; then
            echo "::warning::Potential sensitive data found in code"
          fi

  # Summary for maintainers
  contributor-summary:
    name: Contributor Summary
    runs-on: ubuntu-latest
    needs: [validate-contribution, contributor-quality-check, security-scan]
    if: always() && github.event.pull_request.head.repo.full_name != github.repository
    
    steps:
      - name: Generate summary for maintainers
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = {
              validation: '${{ needs.validate-contribution.result }}',
              quality: '${{ needs.contributor-quality-check.result }}',
              security: '${{ needs.security-scan.result }}'
            };
            
            let summary = '## üîç Contributor PR Summary\n\n';
            summary += '### Automated Checks:\n';
            summary += `- **Validation**: ${jobs.validation === 'success' ? '‚úÖ' : '‚ùå'} ${jobs.validation}\n`;
            summary += `- **Code Quality**: ${jobs.quality === 'success' ? '‚úÖ' : '‚ùå'} ${jobs.quality}\n`;
            summary += `- **Security**: ${jobs.security === 'success' ? '‚úÖ' : '‚ùå'} ${jobs.security}\n\n`;
            
            const allPassed = Object.values(jobs).every(result => result === 'success');
            
            if (allPassed) {
              summary += '‚úÖ **All automated checks passed!** Ready for human review.\n';
            } else {
              summary += '‚ö†Ô∏è **Some checks failed.** Please review the contributor feedback above.\n';
            }
            
            summary += '\n---\n*Automated summary for maintainers*';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: summary
            });