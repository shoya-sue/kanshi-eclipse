name: Scheduled Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      tasks:
        description: 'Maintenance tasks to run'
        required: false
        type: choice
        default: 'all'
        options:
          - all
          - security-audit
          - dependency-update
          - cache-cleanup
          - performance-check

env:
  NODE_VERSION: '18'

jobs:
  # Security Audit
  security-audit:
    name: Daily Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.tasks == 'security-audit' || github.event.inputs.tasks == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=low > security-audit.txt || true
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat security-audit.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Check for critical vulnerabilities
        run: |
          if npm audit --audit-level=critical; then
            echo "‚úÖ No critical vulnerabilities found"
          else
            echo "‚ö†Ô∏è Critical vulnerabilities detected!"
            echo "::warning::Critical security vulnerabilities found in dependencies"
          fi

  # Dependency Updates
  dependency-update:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    if: github.event.inputs.tasks == 'dependency-update' || github.event.inputs.tasks == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for outdated packages
        run: |
          npm outdated > outdated-packages.txt || true
          echo "## Outdated Packages" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat outdated-packages.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Generate update report
        run: |
          echo "### Recommendations:" >> $GITHUB_STEP_SUMMARY
          echo "- Review outdated packages and plan updates" >> $GITHUB_STEP_SUMMARY
          echo "- Test major version updates in a separate branch" >> $GITHUB_STEP_SUMMARY
          echo "- Update patch versions during next maintenance window" >> $GITHUB_STEP_SUMMARY

  # Cache Cleanup
  cache-cleanup:
    name: Cache Cleanup
    runs-on: ubuntu-latest
    if: github.event.inputs.tasks == 'cache-cleanup' || github.event.inputs.tasks == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Cleanup GitHub Actions cache
        run: |
          echo "## Cache Cleanup Report" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Actions cache will be automatically cleaned" >> $GITHUB_STEP_SUMMARY
          echo "- Old cache entries are automatically removed after 7 days" >> $GITHUB_STEP_SUMMARY
          echo "- No manual intervention required" >> $GITHUB_STEP_SUMMARY

  # Performance Check
  performance-check:
    name: Performance Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.tasks == 'performance-check' || github.event.inputs.tasks == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Analyze build size
        run: |
          BUILD_SIZE=$(du -sh dist/ | cut -f1)
          echo "## Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Size**: $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY
          
          # Check if build size is reasonable (under 10MB)
          SIZE_BYTES=$(du -sb dist/ | cut -f1)
          MAX_SIZE=10485760  # 10MB in bytes
          
          if [ $SIZE_BYTES -lt $MAX_SIZE ]; then
            echo "- **Status**: ‚úÖ Build size within acceptable limits" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ‚ö†Ô∏è Build size exceeds recommended limits" >> $GITHUB_STEP_SUMMARY
            echo "::warning::Build size ($BUILD_SIZE) exceeds recommended 10MB limit"
          fi

      - name: Check bundle composition
        run: |
          echo "### Bundle Analysis:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ls -la dist/ >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Code Quality Check
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    if: github.event.inputs.tasks == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          npm run lint > lint-results.txt || true
          echo "## Code Quality Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat lint-results.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Type checking
        run: |
          npm run typecheck > typecheck-results.txt || true
          echo "## TypeScript Check Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat typecheck-results.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Health Report
  health-report:
    name: Generate Health Report
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-update, cache-cleanup, performance-check, code-quality]
    if: always()
    
    steps:
      - name: Generate overall health report
        run: |
          echo "# üè• Daily Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Audit**: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Update Check**: ${{ needs.dependency-update.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Cleanup**: ${{ needs.cache-cleanup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Check**: ${{ needs.performance-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Overall Status:" >> $GITHUB_STEP_SUMMARY
          
          # Count failures
          FAILURES=0
          if [[ "${{ needs.security-audit.result }}" == "failure" ]]; then ((FAILURES++)); fi
          if [[ "${{ needs.dependency-update.result }}" == "failure" ]]; then ((FAILURES++)); fi
          if [[ "${{ needs.cache-cleanup.result }}" == "failure" ]]; then ((FAILURES++)); fi
          if [[ "${{ needs.performance-check.result }}" == "failure" ]]; then ((FAILURES++)); fi
          if [[ "${{ needs.code-quality.result }}" == "failure" ]]; then ((FAILURES++)); fi
          
          if [[ $FAILURES -eq 0 ]]; then
            echo "‚úÖ **System Health**: All checks passed" >> $GITHUB_STEP_SUMMARY
          elif [[ $FAILURES -le 2 ]]; then
            echo "‚ö†Ô∏è **System Health**: Minor issues detected ($FAILURES failures)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **System Health**: Major issues detected ($FAILURES failures)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recommendations:" >> $GITHUB_STEP_SUMMARY
          echo "- Review failed checks and address issues" >> $GITHUB_STEP_SUMMARY
          echo "- Update dependencies during next maintenance window" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor performance metrics trends" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Report generated on: $(date -u)*" >> $GITHUB_STEP_SUMMARY

      - name: Set final status
        run: |
          FAILURES=0
          if [[ "${{ needs.security-audit.result }}" == "failure" ]]; then ((FAILURES++)); fi
          if [[ "${{ needs.dependency-update.result }}" == "failure" ]]; then ((FAILURES++)); fi
          if [[ "${{ needs.cache-cleanup.result }}" == "failure" ]]; then ((FAILURES++)); fi
          if [[ "${{ needs.performance-check.result }}" == "failure" ]]; then ((FAILURES++)); fi
          if [[ "${{ needs.code-quality.result }}" == "failure" ]]; then ((FAILURES++)); fi
          
          if [[ $FAILURES -gt 2 ]]; then
            echo "‚ùå Critical maintenance issues detected"
            exit 1
          else
            echo "‚úÖ Maintenance check completed successfully"
          fi